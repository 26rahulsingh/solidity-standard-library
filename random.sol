pragma solidity ^0.4.0;

/*
#    Copyright (C) 2017  alianse777

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/* "random" numbers generator (not cryptographicaly secure)
   rand(uint seed) - returns random number generated by seed
   randint() - returns random number with current time as seed
   randbytes(uint size) - returns byte array of random bytes
*/


contract Random{
    uint last = 0;
    function rand(uint seed) constant returns (uint){
        bytes32 data;
        if (seed % 2 == 0){
            data = sha3(bytes32(seed));
        }else{
            data = sha3(sha3(bytes32(seed)));
        }
        uint sum;
        for(uint i;i < 32;i++){
            sum += uint(data[i]);
        }
        return uint(data[sum % data.length]);
    }
    
    function randint() constant returns(uint) {
        if (last == 0){
            last = now;
        }
        uint x = rand(last);
        last = x;
        return x;
    }
    
    function randbytes(uint size, uint seed) constant returns (byte []){
        byte [] memory data = new byte[](size);
        uint x = seed;
        for(uint i;i < size;i++){
            x = rand(x);
            data[i] = byte(x % 256);
        }
        return data;
    }
}
